#!/usr/bin/env python

from __future__ import print_function
from __future__ import division
from __future__ import unicode_literals
from __future__ import absolute_import

import os
import sys
import ctypes

HOME_DIR = os.path.expanduser('~')
ROOT_DIR = os.path.join( HOME_DIR, '.vim/bundle/YouCompleteMe/third_party/ycmd' )
YCM_CORE_PATH = os.path.join( ROOT_DIR, 'ycm_core.so' )
DIR_OF_THIRD_PARTY = os.path.join( ROOT_DIR, 'third_party' )
LIBCLANG_DIR = os.path.join( DIR_OF_THIRD_PARTY, 'clang', 'lib' )

sys.path.append(ROOT_DIR)

def ReadFile( filepath ):
  with open( filepath, "r" ) as f:
    return f.read()

def ExpectedCoreVersion():
  return int( ReadFile( os.path.join( ROOT_DIR, 'CORE_VERSION' ) ) )

def ToUnicode( value ):
  if not value:
    return str()
  if isinstance( value, str ):
    return value
  if isinstance( value, bytes ):
    # All incoming text should be utf8
    return str( value, 'utf8' )
  return str( value )

def ListDirectory( path ):
  try:
    # Path must be a Unicode string to get Unicode strings out of listdir.
    return os.listdir( ToUnicode( path ) )
  except Exception:
    return []

def LoadYcmCoreDependencies():
  for name in ListDirectory( LIBCLANG_DIR ):
    if name.startswith( 'libclang' ):
      libclang_path = os.path.join( LIBCLANG_DIR, name )
      if os.path.isfile( libclang_path ):
        ctypes.cdll.LoadLibrary( libclang_path )
        return

def ImportCore():
  import ycm_core as ycm_core
  return ycm_core

def IsCoreCompileNeeded():
  try:
    LoadYcmCoreDependencies()
    ycm_core = ImportCore()
  except ImportError as error:
    return True

  try:
    current_core_version = ycm_core.YcmCoreVersion()
  except AttributeError:
    return True

  if ExpectedCoreVersion() != current_core_version:
    return True

  return False

def Main():
  if (IsCoreCompileNeeded()):
    print ('YCM Compile Required')
    sys.exit(1)
  else:
    sys.exit(0)


if __name__ == "__main__":
  Main()
