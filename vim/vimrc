set nocompatible
filetype plugin indent on

" Pathogen
execute pathogen#infect()

" GUI specific stuff
if has("gui_running")

  if has('win32')
    "add windows key behaviors for guis on any system
    source $VIMRUNTIME/mswin.vim
  endif

  set guioptions-=T " Hide toolbar in gui
  set guioptions+=b " Show bottom scroll bar

  " set window size
  set lines=36
  set columns=120
endif

" General
set autoread " reload files when changed on disk, i.e. via `git checkout`
set history=1000
set tabpagemax=50

set backspace=indent,eol,start
set complete-=i
set showmatch
set smarttab

set nrformats-=octal
set shiftround
set ttimeout
set ttimeoutlen=50

set fileformats+=mac
set encoding=utf-8

" no backup
set nobackup
set nowritebackup
set noswapfile

" Indenting
set tabstop=2
set shiftwidth=2
set expandtab
set autoindent

" Folding
" set foldenable
" set foldmethod=syntax
" set foldcolumn=5
" set foldlevel=5

" Theme
syntax enable
set number
set nowrap
set background=dark
let g:solarized_italic=0
colorscheme solarized
call togglebg#map("<F9>")   " Toggle light/dark colors with <leader>s

set laststatus=2 " always show status bar
set ruler        " always show cursor position
set showcmd      " show incomplete commands
set wildmenu

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Always show some margin space
if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

" Highlight searching
set hlsearch                " highligh searches
set incsearch
nnoremap <silent> <C-N> :nohlsearch<CR><C-N>

" keyboard shortcuts
let mapleader = ','
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <leader>l :Align
nmap <leader>a :Ack
nmap <leader>b :CtrlPBuffer<CR>
nmap <leader>d :NERDTreeToggle<CR>
nmap <leader>f :NERDTreeFind<CR>
nmap <leader>t :CtrlP<CR>
nmap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nmap <leader>] :TagbarToggle<CR>
" nmap <leader><space> :call whitespace#strip_trailing()<CR>
nmap <leader>g :GitGutterToggle<CR>
" rails naviagion
nmap <leader>v :Eview<CR>
nmap <leader>c :Econtroller<CR>
nmap <leader>m :Emodel<CR>
" set vimrc path appropriately
if has('win32')
  map <silent> <leader>V :source ~/_vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
else
  map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
endif

" plugin settings
let g:ctrlp_match_window = 'order:ttb,max:20'
let g:NERDSpaceDelims=1
let g:gitgutter_enabled = 0
let g:Powerline_colorscheme = 'solarized256'
let g:syntastic_check_on_open=1

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  let g:ackprg = 'ag --nogroup --column'

  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" Autocommands
autocmd VimResized * :wincmd = " automatically rebalance windows on vim resize
autocmd BufWritePre * :%s/\s\+$//e " Cleanup trailing whitespace on save
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml " fdoc is yaml
autocmd BufRead,BufNewFile *.md set filetype=markdown " md is markdown

" extra rails.vim help
autocmd User Rails silent! Rnavcommand decorator      app/decorators            -glob=**/* -suffix=_decorator.rb
autocmd User Rails silent! Rnavcommand observer       app/observers             -glob=**/* -suffix=_observer.rb
autocmd User Rails silent! Rnavcommand feature        features                  -glob=**/* -suffix=.feature
autocmd User Rails silent! Rnavcommand job            app/jobs                  -glob=**/* -suffix=_job.rb
autocmd User Rails silent! Rnavcommand mediator       app/mediators             -glob=**/* -suffix=_mediator.rb
autocmd User Rails silent! Rnavcommand stepdefinition features/step_definitions -glob=**/* -suffix=_steps.rb

" don't use rvm on window
if !has('win32')
  autocmd BufEnter * Rvm
endif

" List chars
if &listchars ==# 'eol:$'
  set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
  if !has('win32') && (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8')
    let &listchars = "tab:\u21e5 ,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
  endif
endif

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux'
  set t_Co=16
endif

" Make Y consistent with C and D.  See :help Y.
nnoremap Y y$

